* und - micro nix deployer
Inspired by [[https://github.com/numtide/nixos-anywhere][nixos-anywhere]] and [[https://github.com/MatthewCroughan/nixinate][nixinate]], this tool enables you to install and update
a NixOS configuration on any system with SSH and root access and some basic tools.

** Usage
#+begin_src nix
  {
    inputs = {
      # the installation uses disko to prepare the disks
      disko.inputs.nixpkgs.follows = "nixpkgs";

      und.url = "github:42loco42/und";
    };

    outputs = { self, nixpkgs, ... }: {
      apps = self.inputs.und.und self;
      nixosConfigurations = {
        test = {
          system = "x86_64-linux";
          modules = [
            ./disk.nix # disko config file

            self.inputs.disko.nixosModules.disko

            {
              _module.args.und = {
                host = "example.org";
                user = "foobar";

                # set this option if the user on the old system (which will be overwritten)
                # is different from your normal user
                # preUser = "barbaz";

                # set this option to use a custom kexec tarbarll URL
                # otherwise, the default tarball from https://github.com/nix-community/nixos-anywhere will be used
                # kexec = "https://example.org/other-kexec.tar.gz"
              };
            }
          ];
        };
      };
    };
  }
#+end_src

Now you can run ~nix run .#test -- <options>~ to install or update your config!

** Options for the script
The following options are available:
- ~-u, --user~: override the ~user~ option
- ~-h, --host~: override the ~host~ option
- ~-p, --preUser~: override the ~preUser~ option
- ~-k, --kexec~: override the ~kexec~ option
- ~-l, --local~: target the local system (e.g. use from a NixOS live ISO)
- ~-i, --install~: install instead of update
- ~--no-format~: don't format the disks
- ~--no-kexec~: don't perform the kexec steps (e.g. when the target is already running NixOS)
- ~--no-reboot~: don't reboot after the installation has finished
- ~--save-hwconf <path>~: generate & save a hardware configuration file to ~<path>~.
  The script will then pause to allow further edits and actions.

** Notes
- all builds happen on the remote system to allow installing to different architectures
- all SSH connections have a PTY, so you can enter passwords
